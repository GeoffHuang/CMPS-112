--------------------------
-- | Geoff Huang      | --
-- | ghuang6@ucsc.edu | --
--------------------------

-------------------------------------------------------------------------------
-- DO NOT MODIFY THIS SEGMENT
-------------------------------------------------------------------------------

let TRUE  = \x y -> x
let FALSE = \x y -> y
let ITE   = \b x y -> b x y
let NOT   = \b x y -> b y x
let AND   = \b1 b2 -> ITE b1 b2 FALSE
let OR    = \b1 b2 -> ITE b1 TRUE b2

-------------------------------------------------------------------------------
-- YOU SHOULD ONLY MODIFY THE TEXT BELOW, JUST THE PARTS MARKED AS COMMENTS
-------------------------------------------------------------------------------
  
-- note: \x y z -> x is syntactic sugar for \x -> \y -> \z -> x
-- note: the implied parentheses of the above are: \x -> (\y -> (\z -> x)) ; right associative
-- note: however, function application is right associative (see below comment)

-- note: Elsa allows multiple alpha reductions in a single =a> step
-- note: Elsa allows multiple delta reductions in a single =d> step

-- note: =*> means one or more steps ("transitive equivalence")
-- note: =~> means "normalizes to" (the expression after =~> cannot be reduced anymore; it's in normal form)

-- note: ITE ("if then else") is never necessary; it's just there for readability
-- note: you CANNOT rename free variables (this problem doesn't show up in this homework though)

eval not_false :
  NOT FALSE
  =d> (\b x y -> b y x) FALSE
  =b> \x y -> FALSE y x
  =d> \x y -> (\x y -> y) y x
  =a> \x y -> (\a b -> b) y x
  =b> \x y -> (\b -> b) x
  =b> \x y -> x
  =d> TRUE

-- note: the above alpha reductions are not necessary (but can help avoid confusion)
-- (alpha reductions are only necessary when a beta reduction would result in a free variable being captured)
-- below is the same reduction without alpha renaming
eval not_false :
  NOT FALSE
  =d> (\b x y -> b y x) FALSE
  =b> \x y -> FALSE y x
  =d> \x y -> (\x y -> y) y x
  =b> \x y -> (\y -> y) x
  =b> \x y -> x
  =d> TRUE

-- note: not delta reducing everything immediately helps avoid many reduction steps
-- note: function application is right associative; we must apply AND to FALSE first; we cannot apply FALSE to TRUE first
-- ("applying AND to FALSE" is the same thing as saying "passing in FALSE to AND")
eval and_false_true :
  AND FALSE TRUE
  =d> (\b1 b2 -> ITE b1 b2 FALSE) FALSE TRUE
  =b> (\b2 -> ITE FALSE b2 FALSE) TRUE
  =b> ITE FALSE TRUE FALSE
  =d> (\b x y -> b x y) FALSE TRUE FALSE
  =b> (\x y -> FALSE x y) TRUE FALSE
  =b> (\y -> FALSE TRUE y) FALSE
  =b> FALSE TRUE FALSE
  =d> (\x y -> y) TRUE FALSE
  =b> (\y -> y) FALSE
  =b> FALSE

eval or_true_false :
  OR TRUE FALSE
  =d> (\b1 b2 -> ITE b1 TRUE b2) TRUE FALSE
  =b> (\b2 -> ITE TRUE TRUE b2) FALSE
  =b> ITE TRUE TRUE FALSE
  =d> (\b x y -> b x y) TRUE TRUE FALSE
  =b> (\x y -> TRUE x y) TRUE FALSE
  =b> (\y -> TRUE TRUE y) FALSE
  =b> TRUE TRUE FALSE
  =d> (\x y -> x) TRUE FALSE
  =b> (\y -> TRUE) FALSE
  =b> TRUE
